@startuml

skinparam linetype ortho

node "TFDefect GitHub Action" {
    
    rectangle "Couche présentation"  #ADD8E6 {
        package "Template" {}
    }

    rectangle "Couche application" #FFAAAA {
        package "ActionRunner" {}
        package "AnalyzeTFCode" {}
        package "DetectTFChanges" {}
        package "ReportGenerator" {}
    }

    rectangle "Couche domaine" #FFFF99 {
        frame "Models" {
            package "RandomForestModel" {}
            package "DummyModel" {}
        }  
        package "ModelFactory" {}  
    }

    rectangle "Couche infrastructure" #90EE90 {
        package "GitChanges" {}
        package "GitAdapter" {}
        package "TerraformParser" {}
        package "DefectHistoryManager" {}
        frame "MetricsExtractors" {
            package "CodeMetricsExtractor" {}
            package "ProcessMetricsExtractor" {}
            package "DeltaMetricsExtractor" {}
        }
        package "ProcessMetrics" {}
        package "ContributionBuilder" {}
        package "MetricsExtractorFactory" {}
        package "FeatureVectorBuilder" {}
    }

    rectangle "Couche données" #D3D3D3 {
        package "Cache" {}
    }
}

package TerraMetrics{}

' Relations entre les couches
Template ..> ActionRunner : "déclenche"

ActionRunner ..> DetectTFChanges : "appelle"
ActionRunner ..> AnalyzeTFCode : "appelle"
ActionRunner ..> ReportGenerator : "génère"

DetectTFChanges ..> GitChanges : "utilise"
GitChanges ..> GitAdapter : "dépend de"
GitAdapter ..> TerraformParser : "parse des fichiers"

AnalyzeTFCode .down.> Cache: Stocke les \n données calculées
AnalyzeTFCode ..> MetricsExtractors: utilise
CodeMetricsExtractor ...> TerraMetrics: utilise
DeltaMetricsExtractor ....> TerraMetrics: utilise

ModelFactory .down..> Models: Crée une instance de 

MetricsExtractorFactory .u..> MetricsExtractors: Crée une instance de
ProcessMetricsExtractor ...> ProcessMetrics: utilise
ProcessMetricsExtractor ...> ContributionBuilder: utilise

FeatureVectorBuilder ..> MetricsExtractors : "utilise"
FeatureVectorBuilder ...> Models : "prépare les vecteurs pour"
ActionRunner ...> FeatureVectorBuilder : "utilise"

ActionRunner ..> DefectHistoryManager : "enregistre les résultats"
Models ..> DefectHistoryManager : "sauvegarde les prédictions"
Cache ..> DefectHistoryManager : "persiste les données"
@enduml
