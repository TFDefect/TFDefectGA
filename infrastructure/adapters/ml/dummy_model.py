import numpy as np
from sklearn.dummy import DummyClassifier

from infrastructure.adapters.ml.base_model import BaseMLModel
from utils.logger_utils import logger


class DummyMLModel(BaseMLModel):
    """Mod√®le ML na√Øf bas√© sur un DummyClassifier."""

    def __init__(self, strategy="stratified", random_state=42):
        self.model = DummyClassifier(strategy=strategy, random_state=random_state)

    def predict_defects(self, X: np.ndarray, num_samples: int) -> list:
        """Retourne des pr√©dictions al√©atoires pour chaque bloc Terraform analys√©."""

        # Fake labels pour DummyClassifier (0: sans d√©faut, 1: d√©fectueux)
        y_dummy = np.random.choice([0, 1], size=num_samples)

        # Entra√Ænement fictif du mod√®le
        self.model.fit(X, y_dummy)

        predictions = self.model.predict(X)

        # Conversion des pr√©dictions
        labels = [
            "üêû D√©fectueux" if pred == 1 else "‚úÖ Sans d√©faut" for pred in predictions
        ]

        logger.info(f"Pr√©dictions ML g√©n√©r√©es : {labels}")
        return labels
